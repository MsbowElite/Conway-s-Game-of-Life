// <auto-generated />
using System;
using GameOfLife.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GameOfLife.Infrastructure.Migrations
{
    [DbContext(typeof(GameContext))]
    [Migration("20240608035638_Manipulate_Relationships_Type")]
    partial class Manipulate_Relationships_Type
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GameOfLife.Domain.GameStates.GameState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<short>("GenerationNumber")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("GameStates");
                });

            modelBuilder.Entity("GameOfLife.Domain.Games.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FinalGameStateId")
                        .HasColumnType("uuid");

                    b.Property<short>("Height")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("Width")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("FinalGameStateId")
                        .IsUnique();

                    b.ToTable("Games");
                });

            modelBuilder.Entity("GameOfLife.Domain.GameStates.GameState", b =>
                {
                    b.HasOne("GameOfLife.Domain.Games.Game", "GameRelation")
                        .WithMany("GameStates")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Game_FK");

                    b.Navigation("GameRelation");
                });

            modelBuilder.Entity("GameOfLife.Domain.Games.Game", b =>
                {
                    b.HasOne("GameOfLife.Domain.GameStates.GameState", "GameState")
                        .WithOne("Game")
                        .HasForeignKey("GameOfLife.Domain.Games.Game", "FinalGameStateId")
                        .HasConstraintName("GameStateFinal_FK");

                    b.Navigation("GameState");
                });

            modelBuilder.Entity("GameOfLife.Domain.GameStates.GameState", b =>
                {
                    b.Navigation("Game")
                        .IsRequired();
                });

            modelBuilder.Entity("GameOfLife.Domain.Games.Game", b =>
                {
                    b.Navigation("GameStates");
                });
#pragma warning restore 612, 618
        }
    }
}
